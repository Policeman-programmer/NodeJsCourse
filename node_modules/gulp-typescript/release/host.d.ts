import * as ts from "typescript";
import { FileCache } from "./input";
export declare class Host implements ts.CompilerHost {
    public typescript: typeof ts;
    public fallback: ts.CompilerHost;
    public currentDirectory: string;
    public input: FileCache;
    public getCurrentDirectory: () => string;
    public writeFile: (fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) => void;
    public fileExists: (fileName: string) => boolean;
    public readFile: (fileName: string) => string;
    public getSourceFile: (fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) => ts.SourceFile;
    public realpath: (path: string) => string;
    public getDirectories: (path: string) => string[];
    public directoryExists: (path: string) => boolean;
    public readDirectory: (rootDir: string, extensions: string[], excludes: string[], includes: string[], depth?: number) => string[];
    constructor(typescript: typeof ts, currentDirectory: string, input: FileCache, options: ts.CompilerOptions);
    public getNewLine(): string;
    public useCaseSensitiveFileNames(): boolean;
    public getCanonicalFileName(filename: string): string;
    public getDefaultLibFileName(options: ts.CompilerOptions): string;
    public getDefaultLibLocation(): string;
}
