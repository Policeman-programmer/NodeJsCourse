import * as ts from "typescript";
import { Host } from "./host";
import { File } from "./input";
import { ProjectInfo } from "./project";
import { FinalTransformers } from "./types";
export interface ICompiler {
    prepare(project: ProjectInfo, finalTransformers?: FinalTransformers): void;
    inputFile(file: File): void;
    inputDone(): void;
}
/**
 * Compiles a whole project, with full type checking
 */
export declare class ProjectCompiler implements ICompiler {
    public finalTransformers: FinalTransformers;
    public host: Host;
    public project: ProjectInfo;
    public program: ts.Program;
    private hasSourceMap;
    private attachContentToFile;
    private emit;
    private emitFile;
    private removeSourceMapComment;
    public prepare(project: ProjectInfo, finalTransformers?: FinalTransformers): void;
    public inputFile(file: File): void;
    public inputDone(): void;
}
export declare class FileCompiler implements ICompiler {
    public finalTransformers: FinalTransformers;
    public host: Host;
    public project: ProjectInfo;
    private output;
    private previousOutput;
    private compilationResult;
    private write;
    public prepare(project: ProjectInfo, finalTransformers: FinalTransformers): void;
    public inputFile(file: File): void;
    public inputDone(): void;
}
