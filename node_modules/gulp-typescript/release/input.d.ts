import * as ts from "typescript";
import { VinylFile } from "./types";
import * as utils from "./utils";
export declare enum FileChangeState {
    New = 0,
    Equal = 1,
    Modified = 2,
    Deleted = 3,
    NotFound = 4,
}
export declare enum FileKind {
    Source = 0,
    Config = 1,
}
export interface FileChange {
    previous: File;
    current: File;
    state: FileChangeState;
}
export interface File {
    gulp?: VinylFile;
    fileNameNormalized: string;
    fileNameOriginal: string;
    content: string;
    kind: FileKind;
    ts?: ts.SourceFile;
}
export declare namespace File {
    function fromContent(fileName: string, content: string): File;
    function fromGulp(file: VinylFile): File;
    function equal(a: File, b: File): boolean;
    function getChangeState(previous: File, current: File): FileChangeState;
}
export declare class FileDictionary {
    public files: utils.Map<File>;
    public firstSourceFile: File;
    public typescript: typeof ts;
    public initTypeScriptSourceFile: (file: File) => void;
    public commonBasePath: string;
    public commonSourceDirectory: string;
    private addFile;
    private getSourceFileNames;
    constructor(typescript: typeof ts);
    public addGulp(gFile: VinylFile): File;
    public addContent(fileName: string, content: string): File;
    public getFile(name: string): File;
    public getFileNames(onlyGulp?: boolean): string[];
}
export declare class FileCache {
    public previous: FileDictionary;
    public current: FileDictionary;
    public options: ts.CompilerOptions;
    public noParse: boolean;
    public typescript: typeof ts;
    public version: number;
    public firstSourceFile: File;
    public commonBasePath: string;
    public commonSourceDirectory: string;
    private createDictionary;
    private initTypeScriptSourceFile;
    constructor(typescript: typeof ts, options: ts.CompilerOptions);
    public addGulp(gFile: VinylFile): File;
    public addContent(fileName: string, content: string): File;
    public reset(): void;
    public getFile(name: string): File;
    public getFileChange(name: string): FileChange;
    public getFileNames(onlyGulp?: boolean): string[];
    public isChanged(onlyGulp?: boolean): boolean;
}
